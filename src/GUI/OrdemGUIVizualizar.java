/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Classe.ClassificacaoProblema;
import Classe.Cliente;
import Classe.Funcionario;
import Classe.OrdemDeServico;
import Dados.DadosClassificacaoProblema;
import Dados.DadosCliente;
import Dados.DadosFuncionario;
import Dados.DadosOrdemDeServico;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pichau
 */
public final class OrdemGUIVizualizar extends javax.swing.JFrame {

    public void ResetarTabela() {
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Status", "Numero da Ordem", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});
        jTableListarOs.setModel(modelo);
    }

    ArrayList<Cliente> respostaCpf = new ArrayList<>();
    ArrayList<Funcionario> respostaMatricula = new ArrayList<>();
    ArrayList<ClassificacaoProblema> respostaCodigo = new ArrayList<>();
    ArrayList<OrdemDeServico> respostaOs = new ArrayList<>();
    ArrayList<OrdemDeServico> repostaAberta = new ArrayList<>();

    public void ListarCpfCliente() {

        try {

            Cliente cliente = new Cliente();
            DadosCliente dados = new DadosCliente();

            this.respostaCpf = dados.listarClientes(cliente);

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();

            for (Cliente c : this.respostaCpf) {
                modelo.addElement(c.getCpf());
            }

            jComboBoxCpfCliente.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }

    public void ListarMatriculaFuncionario() {

        try {

            Funcionario funcionario = new Funcionario();
            DadosFuncionario dados = new DadosFuncionario();

            this.respostaMatricula = dados.listarFuncionarios(funcionario);

            DefaultComboBoxModel modelo = new DefaultComboBoxModel();

            for (Funcionario f : respostaMatricula) {
                modelo.addElement(f.getMatricula());
            }

            jComboBoxMatriculaFuncionario.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }

    }

    public void ListarCodigoProblema() {

        try {

            ClassificacaoProblema classificacao = new ClassificacaoProblema();
            DadosClassificacaoProblema dados = new DadosClassificacaoProblema();

            this.respostaCodigo = dados.listarClassificacaoProblemas(classificacao);
            DefaultComboBoxModel modelo = new DefaultComboBoxModel();

            for (ClassificacaoProblema p : respostaCodigo) {
                modelo.addElement(p.getCodigo());
            }

            jComboBoxCodigoProblema.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }

    public OrdemGUIVizualizar() {
        initComponents();
        ResetarTabela();
        ListarCodigoProblema();
        ListarCpfCliente();
        ListarMatriculaFuncionario();

        jTextAreaMotivoDescricao.setVisible(false);
        jLabelMotivoDescricao.setVisible(false);

        jTextAreaInformacao.setWrapStyleWord(true);
        jTextAreaInformacao.setLineWrap(true);

        jTextAreaMotivoDescricao.setWrapStyleWord(true);
        jTextAreaMotivoDescricao.setLineWrap(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListarOs = new javax.swing.JTable();
        jLabelTituloOS = new javax.swing.JLabel();
        jCheckBoxAbertas = new javax.swing.JCheckBox();
        jCheckBoxCanceladas = new javax.swing.JCheckBox();
        jCheckBoxSolucionadas = new javax.swing.JCheckBox();
        jCheckBoxTodas = new javax.swing.JCheckBox();
        jLabelCpfCliente = new javax.swing.JLabel();
        jLabelMatriculaFuncionario = new javax.swing.JLabel();
        jLabelCodigoProblema = new javax.swing.JLabel();
        jComboBoxCpfCliente = new javax.swing.JComboBox();
        jComboBoxMatriculaFuncionario = new javax.swing.JComboBox();
        jComboBoxCodigoProblema = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonListarPorCpf = new javax.swing.JButton();
        jButtonListarPorMatricula = new javax.swing.JButton();
        jButtonListaCodigo = new javax.swing.JButton();
        jButtonListar = new javax.swing.JButton();
        jLabelInformcao = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaInformacao = new javax.swing.JTextArea();
        jLabelMotivoDescricao = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaMotivoDescricao = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableListarOs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableListarOs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableListarOsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableListarOsMousePressed(evt);
            }
        });
        jTableListarOs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTableListarOsKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListarOs);

        jLabelTituloOS.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabelTituloOS.setText("Listar ordem de serviço");

        jCheckBoxAbertas.setText("Os Abertas");
        jCheckBoxAbertas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAbertasActionPerformed(evt);
            }
        });

        jCheckBoxCanceladas.setText("OS Canceladas");
        jCheckBoxCanceladas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCanceladasActionPerformed(evt);
            }
        });

        jCheckBoxSolucionadas.setText("OS Solucionadas");
        jCheckBoxSolucionadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSolucionadasActionPerformed(evt);
            }
        });

        jCheckBoxTodas.setText("Todas OS");
        jCheckBoxTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxTodasActionPerformed(evt);
            }
        });

        jLabelCpfCliente.setText("Buscar por Cpf do cliente:");

        jLabelMatriculaFuncionario.setText("Buscar por Matrícula Funcionario:");

        jLabelCodigoProblema.setText("Buscar por Código Problema:");

        jComboBoxCpfCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxMatriculaFuncionario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBoxCodigoProblema.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButtonListarPorCpf.setText("Buscar");
        jButtonListarPorCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListarPorCpfActionPerformed(evt);
            }
        });

        jButtonListarPorMatricula.setText("Buscar");
        jButtonListarPorMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListarPorMatriculaActionPerformed(evt);
            }
        });

        jButtonListaCodigo.setText("Buscar");
        jButtonListaCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListaCodigoActionPerformed(evt);
            }
        });

        jButtonListar.setText("Listar");
        jButtonListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListarActionPerformed(evt);
            }
        });

        jLabelInformcao.setText("Descrição do problema :");

        jTextAreaInformacao.setEditable(false);
        jTextAreaInformacao.setColumns(20);
        jTextAreaInformacao.setRows(5);
        jScrollPane2.setViewportView(jTextAreaInformacao);

        jLabelMotivoDescricao.setText("Motivo/Descrição:");

        jTextAreaMotivoDescricao.setEditable(false);
        jTextAreaMotivoDescricao.setColumns(20);
        jTextAreaMotivoDescricao.setRows(5);
        jScrollPane3.setViewportView(jTextAreaMotivoDescricao);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxTodas)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jCheckBoxAbertas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxCanceladas))
                    .addComponent(jLabelTituloOS))
                .addGap(59, 59, 59)
                .addComponent(jCheckBoxSolucionadas)
                .addGap(99, 99, 99)
                .addComponent(jButtonListar)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelCodigoProblema)
                                            .addComponent(jLabelCpfCliente))
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBoxCpfCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBoxCodigoProblema, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelMatriculaFuncionario)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBoxMatriculaFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonListarPorCpf)
                                    .addComponent(jButtonListaCodigo)
                                    .addComponent(jButtonListarPorMatricula)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(114, 114, 114)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(31, 112, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelInformcao, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelMotivoDescricao, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelTituloOS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAbertas)
                    .addComponent(jCheckBoxSolucionadas)
                    .addComponent(jCheckBoxTodas)
                    .addComponent(jCheckBoxCanceladas)
                    .addComponent(jButtonListar))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabelCpfCliente)
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBoxCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonListarPorCpf))
                                .addGap(24, 24, 24)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelMatriculaFuncionario)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBoxMatriculaFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonListarPorMatricula)))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCodigoProblema)
                            .addComponent(jComboBoxCodigoProblema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonListaCodigo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabelInformcao)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelMotivoDescricao)
                                .addGap(46, 46, 46)))))
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxTodasActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxTodas.isSelected()) {

            jCheckBoxCanceladas.setEnabled(false);
            jCheckBoxSolucionadas.setEnabled(false);
            jCheckBoxAbertas.setEnabled(false);

        } else {
            jCheckBoxCanceladas.setEnabled(true);
            jCheckBoxSolucionadas.setEnabled(true);
            jCheckBoxAbertas.setEnabled(true);
        }

    }//GEN-LAST:event_jCheckBoxTodasActionPerformed

    private void jButtonListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListarActionPerformed
        // TODO add your handling code here:

        try {

            OrdemDeServico os = new OrdemDeServico();
            DadosOrdemDeServico dadosOs = new DadosOrdemDeServico();

            this.respostaOs = dadosOs.listarOrdemServicos(os);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new Object[]{"Status", "Numero da Ordem", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

            for (OrdemDeServico o : this.respostaOs) {
                modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
            }

            jTableListarOs.setModel(modelo);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }

        if (jCheckBoxTodas.isSelected()) {

            try {

                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Status", "Numero da Ordem", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

                for (OrdemDeServico o : this.respostaOs) {
                    modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
                }

                jTableListarOs.setModel(modelo);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }

        }
        if (jCheckBoxAbertas.isSelected()) {
            try {

                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Status", "Numero da Ordem", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

                for (OrdemDeServico o : this.respostaOs) {
                    if ("Aberta".equals(o.getStatus())) {
                        modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
                        
                    }
                }

                jTableListarOs.setModel(modelo);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        }
        if (jCheckBoxCanceladas.isSelected()) {

            try {

                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Status", "Numero da Ordem", " Cpf Cliente", "Matricula funcionario", " Código Problema", "Data Cadastro"});

                for (OrdemDeServico o : this.respostaOs) {

                    if ("Cancelada".equals(o.Status())) {

                        modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
                    }
                }

                jTableListarOs.setModel(modelo);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        }
        if (jCheckBoxSolucionadas.isSelected()) {
            try {

                DefaultTableModel modelo = new DefaultTableModel();
                modelo.setColumnIdentifiers(new Object[]{"Status", "Numero da Ordem", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

                for (OrdemDeServico o : this.respostaOs) {

                    if ("Solucionada".equals(o.Status())) {

                        modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
                    }
                }

                jTableListarOs.setModel(modelo);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        }


    }//GEN-LAST:event_jButtonListarActionPerformed

    private void jCheckBoxAbertasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAbertasActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxAbertas.isSelected()) {
            jCheckBoxCanceladas.setEnabled(false);
            jCheckBoxSolucionadas.setEnabled(false);
            jCheckBoxTodas.setEnabled(false);
        } else {
            jCheckBoxCanceladas.setEnabled(true);
            jCheckBoxSolucionadas.setEnabled(true);
            jCheckBoxTodas.setEnabled(true);

        }
    }//GEN-LAST:event_jCheckBoxAbertasActionPerformed

    private void jCheckBoxCanceladasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCanceladasActionPerformed

        if (jCheckBoxCanceladas.isSelected()) {
            jCheckBoxAbertas.setEnabled(false);
            jCheckBoxSolucionadas.setEnabled(false);
            jCheckBoxTodas.setEnabled(false);
        } else {
            jCheckBoxAbertas.setEnabled(true);
            jCheckBoxSolucionadas.setEnabled(true);
            jCheckBoxTodas.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxCanceladasActionPerformed

    private void jCheckBoxSolucionadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSolucionadasActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxSolucionadas.isSelected()) {
            jCheckBoxAbertas.setEnabled(false);
            jCheckBoxCanceladas.setEnabled(false);
            jCheckBoxTodas.setEnabled(false);
        } else {
            jCheckBoxAbertas.setEnabled(true);
            jCheckBoxCanceladas.setEnabled(true);
            jCheckBoxTodas.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxSolucionadasActionPerformed

    private void jButtonListarPorCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListarPorCpfActionPerformed
        // TODO add your handling code here:

        try {

            if (jComboBoxCpfCliente.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(rootPane, "Sem Cliente para consulta");
                return;
            }

            OrdemDeServico os = new OrdemDeServico();
            os.getCliente().setCpf(jComboBoxCpfCliente.getSelectedItem().toString());

            DadosOrdemDeServico dadosLista = new DadosOrdemDeServico();

            this.respostaOs = dadosLista.listarOrdemServicos(os);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new Object[]{"Status", "Numero", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

            for (OrdemDeServico o : this.respostaOs) {
                modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
            }

            jTableListarOs.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }

    }//GEN-LAST:event_jButtonListarPorCpfActionPerformed

    private void jButtonListarPorMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListarPorMatriculaActionPerformed
        // TODO add your handling code here:
        try {

            if (jComboBoxMatriculaFuncionario.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(rootPane, "Sem matrícula para consulta");
                return;
            }
            OrdemDeServico os = new OrdemDeServico();
            os.getFuncionario().setMatricula(Integer.parseInt(jComboBoxMatriculaFuncionario.getSelectedItem().toString()));

            DadosOrdemDeServico dadosLista = new DadosOrdemDeServico();

            this.respostaOs = dadosLista.listarOrdemServicos(os);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new Object[]{"Status", "Numero", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

            for (OrdemDeServico o : this.respostaOs) {
                modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
            }

            jTableListarOs.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }

    }//GEN-LAST:event_jButtonListarPorMatriculaActionPerformed

    private void jButtonListaCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListaCodigoActionPerformed
        // TODO add your handling code here:

        try {

            if (jComboBoxCodigoProblema.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(rootPane, "Sem Código para consulta");
                return;
            }

            OrdemDeServico os = new OrdemDeServico();
            os.getClassificacaoProblema().setCodigo(Integer.parseInt(jComboBoxCodigoProblema.getSelectedItem().toString()));

            DadosOrdemDeServico dadosLista = new DadosOrdemDeServico();

            this.respostaOs = dadosLista.listarOrdemServicos(os);

            DefaultTableModel modelo = new DefaultTableModel();
            modelo.setColumnIdentifiers(new Object[]{"Status", "Numero", " Cpf Cliente", "Matricula funcionario", "Código Problema", "Data Cadastro"});

            for (OrdemDeServico o : this.respostaOs) {
                modelo.addRow(new Object[]{o.getStatus(), o.getNumero(), o.getCliente().getCpf(), o.getFuncionario().getMatricula(), o.getClassificacaoProblema().getCodigo(), o.getDataCadastro()});
            }

            jTableListarOs.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }

    }//GEN-LAST:event_jButtonListaCodigoActionPerformed

    private void jTableListarOsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListarOsMouseClicked
        try {
            MouseEvent e = evt;
            int click = e.getClickCount();
            int linha = jTableListarOs.getSelectedRow();
            if (click == 2) {

                OrdemDeServico ordemServico = this.respostaOs.get(linha);

                if (ordemServico.getStatus().equals("Aberta")) {
                    jTextAreaMotivoDescricao.setVisible(false);
                    jLabelMotivoDescricao.setVisible(false);
                    jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());
                }
                if (ordemServico.getStatus().equals("Cancelada")) {

                    jTextAreaMotivoDescricao.setVisible(true);
                    jLabelMotivoDescricao.setVisible(true);
                    jTextAreaMotivoDescricao.setText(ordemServico.getMotivoCancelamento());
                    jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());
                    jLabelMotivoDescricao.setText("Motivo Cancelamento:");
                }
                if (ordemServico.getStatus().equals("Solucionada")) {

                    jTextAreaMotivoDescricao.setVisible(true);
                    jLabelMotivoDescricao.setVisible(true);
                    jTextAreaMotivoDescricao.setText(ordemServico.getDescricaoServico());
                    jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());
                    jLabelMotivoDescricao.setText("Descrição Serviço:");
                }
                /*if (jCheckBoxTodas.isSelected()) {

                    if ("Cancelada".equals(ordemServico.getStatus())) {
                        jTextAreaMotivoDescricao.setVisible(true);
                        jLabelMotivoDescricao.setVisible(true);
                        jTextAreaMotivoDescricao.setText(ordemServico.getMotivoCancelamento());
                        jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());
                        jLabelMotivoDescricao.setText("Motivo Cancelamento:");
                    }
                    if ("Solucionada".equals(ordemServico.getStatus())) {
                        jTextAreaMotivoDescricao.setVisible(true);
                        jLabelMotivoDescricao.setVisible(true);
                        jTextAreaMotivoDescricao.setText(ordemServico.getDescricaoServico());
                        jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());
                        jLabelMotivoDescricao.setText("Descrição Serviço:");
                    }
                    if ("Aberta".equals(ordemServico.getStatus())) {
                        jTextAreaMotivoDescricao.setVisible(false);
                        jLabelMotivoDescricao.setVisible(false);
                        jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());

                    }

                }*/

                jTextAreaInformacao.setText(ordemServico.getDescricaoProblema());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }//GEN-LAST:event_jTableListarOsMouseClicked

    private void jTableListarOsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListarOsMousePressed
        jTableListarOs.editingCanceled(null);
        jTableListarOs.editingStopped(null);
    }//GEN-LAST:event_jTableListarOsMousePressed

    private void jTableListarOsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableListarOsKeyTyped
        // TODO add your handling code here:
        jTableListarOs.editingCanceled(null);
        jTableListarOs.editingStopped(null);
    }//GEN-LAST:event_jTableListarOsKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrdemGUIVizualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrdemGUIVizualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrdemGUIVizualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrdemGUIVizualizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrdemGUIVizualizar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonListaCodigo;
    private javax.swing.JButton jButtonListar;
    private javax.swing.JButton jButtonListarPorCpf;
    private javax.swing.JButton jButtonListarPorMatricula;
    private javax.swing.JCheckBox jCheckBoxAbertas;
    private javax.swing.JCheckBox jCheckBoxCanceladas;
    private javax.swing.JCheckBox jCheckBoxSolucionadas;
    private javax.swing.JCheckBox jCheckBoxTodas;
    private javax.swing.JComboBox jComboBoxCodigoProblema;
    private javax.swing.JComboBox jComboBoxCpfCliente;
    private javax.swing.JComboBox jComboBoxMatriculaFuncionario;
    private javax.swing.JLabel jLabelCodigoProblema;
    private javax.swing.JLabel jLabelCpfCliente;
    private javax.swing.JLabel jLabelInformcao;
    private javax.swing.JLabel jLabelMatriculaFuncionario;
    private javax.swing.JLabel jLabelMotivoDescricao;
    private javax.swing.JLabel jLabelTituloOS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableListarOs;
    private javax.swing.JTextArea jTextAreaInformacao;
    private javax.swing.JTextArea jTextAreaMotivoDescricao;
    // End of variables declaration//GEN-END:variables
}
